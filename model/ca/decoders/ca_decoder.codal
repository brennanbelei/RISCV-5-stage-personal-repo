/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_decoder.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "opcodes.hcodal"
#include "config.hcodal"
#include "common_enums.hcodal"


// -------------------------------------------------------------------------------------------------
// Decoder
// -------------------------------------------------------------------------------------------------

set dec =        i_hw_halt
                ,i_hw_alu
                ,i_hw_alu_i
                ,i_hw_itype_special
                ,i_hw_btype_branches
                ,i_hw_utype_ops
                ,i_hw_itype_jlreg
                ,i_hw_itype_jlink
                ,i_hw_loads
                ,i_hw_store
                ;

// -------------------------------------------------------------------------------------------------
// Halt instruction
// -------------------------------------------------------------------------------------------------

// This instruction has no operands.

element i_hw_halt
{
    use opc_halt as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        //CHANGE TO ADD: MAKE SURE TO ADD THE NEW VARIABLES WE CREATED FOR THIS PHASE
        
        // Register file write enable
        s_id_regwrite = WE_FALSE;

        // Operations
        s_id_aluop = ALU_NOP;

        // Operand MUXes
        s_id_alusrc2 = DONT_CARE;

        // HALT Command
        s_id_halt = HALT_HALT;

        s_id_branch_sel = DONT_CARE; 

        s_id_branchop = BRANCH_FALSE;

        s_id_rfwt_sel = DONT_CARE;  //check this

        s_id_alusrc1 = DONT_CARE; //check this

        s_id_immsel = IMM_ITYPE; //check this

        s_id_memop = MEM_NOP;

    };
};

// -------------------------------------------------------------------------------------------------
// Arithmetic instructions
// -------------------------------------------------------------------------------------------------

element i_hw_alu
{
    use opc_rtype_alu as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        

        switch (opc)
        {
            //adding the remaining R type cases for aluop, these need to be checked 
            //now each case needs to have 5 more signal assignments: regwrite, alusrc2, and halt are already declared outside of the switch
            case RTYPE_ADD: 
                s_id_aluop = ALU_ADD;
                break;
            case RTYPE_SUB:
                s_id_aluop = ALU_SUB;
                break;
            case RTYPE_XOR:
                s_id_aluop = ALU_XOR;
  
                break;
            case RTYPE_OR:
                s_id_aluop = ALU_OR;
             
                break;
            case RTYPE_AND:
                s_id_aluop = ALU_AND;
        
                break;
            case RTYPE_SLL:
                s_id_aluop = ALU_SLL;
            
                break;
            case RTYPE_SRL:
                s_id_aluop = ALU_SRL;
          
                break;
            case RTYPE_SRA:
                s_id_aluop = ALU_SRA;
           
                break;
            case RTYPE_SLT:
                s_id_aluop = ALU_SLT;
            
                break;
            case RTYPE_SLTU:
                s_id_aluop = ALU_SLTU;
            
                break;
            default:
                codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
                break;
        }

        s_id_regwrite = WE_TRUE;
        s_id_branch_sel = BRADD_ADDR; 
        s_id_branchop = BRANCH_FALSE;
        s_id_rfwt_sel = RFWT_ALU;       //check this one
        s_id_alusrc1 = ALU_SRC1_REG;               //find out this one
        s_id_alusrc2 = ALU2_REG;
        s_id_immsel = IMM_NONE;
        // HALT Command
        s_id_halt = HALT_NOHALT;
        s_id_memop = MEM_NOP;
    };
};



element i_hw_alu_i
{
    use opc_itype_alu as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        switch (opc)
        {
            case ITYPE_ADDI:
                s_id_aluop = ALU_ADD;
                break;
            case ITYPE_SLTI:
                s_id_aluop = ALU_SLT;
                break;
            case ITYPE_SLTIU:
                s_id_aluop = ALU_SLTU;
                break;
            case ITYPE_XORI:
                s_id_aluop = ALU_XOR;
                break;
            case ITYPE_ORI:
                s_id_aluop = ALU_OR;
                break;
            case ITYPE_ANDI:
                s_id_aluop = ALU_AND;
                break;
            default:
                codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
                break;
        }

        s_id_regwrite = WE_TRUE;
        s_id_branch_sel = BRADD_ADDR; 
        s_id_branchop = BRANCH_FALSE;
        s_id_rfwt_sel = RFWT_ALU;
        s_id_alusrc1 = ALU_SRC1_REG;
        s_id_alusrc2 = ALU2_IMM;
        s_id_immsel = IMM_ITYPE;
        // HALT Command
        s_id_halt = HALT_NOHALT;
        s_id_memop = MEM_NOP;
    };
};

element i_hw_itype_special
{
    use opc_itype_special as opc; //was opc_itype_alu

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        switch (opc)
        {
            case IMM_SHIFT_SRAI: //used to be ITYPE_SRAI
                s_id_aluop = ALU_SRA;
                break;
            case IMM_SHIFT_SRLI: //used to be ITYPE_SRLI
                s_id_aluop = ALU_SRL;
                break;
            case IMM_SHIFT_SLLI: //used to be ITYPE_SLLI
                s_id_aluop = ALU_SLL;
                break;

            default:
                codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
                break;
        }
        s_id_regwrite = WE_TRUE;
        s_id_branch_sel = BRADD_ADDR; 
        s_id_branchop = BRANCH_FALSE;
        s_id_rfwt_sel = RFWT_ALU;
        s_id_alusrc1 =  ALU_SRC1_REG;
        s_id_alusrc2 = ALU2_IMM; //check this
        s_id_immsel =  IMM_ITYPE; 
        // HALT Command
        s_id_halt = HALT_NOHALT;
        s_id_memop = MEM_NOP;
    };
};

element i_hw_btype_branches
{
    use opc_btype_branches as opc; //was opc_btype_alu //then tried opc_rtype_alu

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        

        switch (opc)
        {
            //adding the remaining R type cases for aluop, these need to be checked 
            //now each case needs to have 5 more signal assignments: regwrite, alusrc2, and halt are already declared outside of the switch

            //DEBUGGING NOTE: if something here is suspected to not be working
                //try flipping the BRNCH_COND_TRUES to BRNCH_COND_FALSE and vice versa
                //if i recall SLT sets 1 if condition is true which I think would mean that these need to be
                //swapped in order to work correctly 
            case BTYPE_BEQ:
                s_id_aluop = ALU_SUB;
                s_id_branchop = BRANCH_COND_TRUE;
                
                break;
            case BTYPE_BNE:
                s_id_aluop = ALU_SUB;
                s_id_branchop = BRANCH_COND_FALSE;
                
                break;
            case BTYPE_BLT:
                s_id_aluop = ALU_SLT;
                s_id_branchop = BRANCH_COND_FALSE; 
                
                break;
            case BTYPE_BGE:
                s_id_aluop = ALU_SLT;
                s_id_branchop = BRANCH_COND_TRUE;
                
                break;
            case BTYPE_BLTU:
                s_id_aluop = ALU_SLTU;
                s_id_branchop = BRANCH_COND_FALSE;
                
                break;
            case BTYPE_BGEU: //check this one
                s_id_aluop = ALU_SLTU;
                s_id_branchop = BRANCH_COND_TRUE;
                
                break;
            default:
                s_id_aluop = ALU_NOP;
                s_id_branchop = BRANCH_COND_FALSE;

                codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
                break;
        }

        s_id_regwrite = WE_FALSE; //branch instrs do not write to the register file
        s_id_immsel = IMM_BTYPE;
        
        s_id_branch_sel = BRADD_ADDR;
        s_id_alusrc1 = ALU_SRC1_REG;
        s_id_rfwt_sel = RFWT_ALU; //instructions said to set it to DONT_CARE because reg write is False
        s_id_alusrc2 = ALU2_REG;
        // HALT Command
        s_id_halt = HALT_NOHALT;
        s_id_memop = MEM_NOP;
    };
};

element i_hw_utype_ops
{
    use opc_utype_ops as opc; //was opc_utype_alu //then tried opc_rtype_alu

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        switch (opc)
        {
            case UTYPE_LUI:
                //what do I put for aluop
                
                s_id_aluop = ALU_ADD; //check this
                //im pretty sure the op is ADD because 
                s_id_alusrc1 = ALU_SRC1_ZERO;
                break; 
            case UTYPE_AUIPC:
                //what do I put for aluop
                s_id_aluop = ALU_ADD;//check this
                //im pretty sure the op is ADD because the instruction adds upper immediate to PC
                s_id_alusrc1 = ALU_SRC1_PC;
                break;
            default:
                codasip_fatal(ALU_ERROR, "Default case: %d\n", opc);
                break;
        }

        s_id_regwrite = WE_TRUE; //I believe this is true because lui writes to rd reg and auipc writes to pc reg
        s_id_branch_sel = BRADD_ADDR; 
        s_id_branchop = BRANCH_FALSE;
        s_id_rfwt_sel = RFWT_ALU;
        s_id_alusrc2 = ALU2_IMM;
        s_id_immsel = IMM_UTYPE;
        // HALT Command
        s_id_halt = HALT_NOHALT;
        s_id_memop = MEM_NOP;
    };
};

element i_hw_itype_jlreg
{
    //this is the implementation for the jalr instruction
    use opc_itype_jlreg as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        s_id_aluop = ALU_ADD;

        s_id_regwrite = WE_TRUE; //we will be writing to a reg
        s_id_branch_sel = BRADD_ALU; 
        s_id_branchop = BRANCH_TRUE; //this is the setting for jump instructions (unconditional True)
        s_id_rfwt_sel = RFWT_PC;
        s_id_alusrc1 = ALU_SRC1_REG; //check this
        s_id_alusrc2 = ALU2_IMM;     //check this
        s_id_immsel = IMM_ITYPE;
        // HALT Command
        s_id_halt = HALT_NOHALT;
        s_id_memop = MEM_NOP;
    };
};

element i_hw_itype_jlink
{
    use opc_jtype_jlink as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        // Register file write enable
        //there is no op for the jump instr so we dont care what it is
        s_id_aluop = ALU_NOP;

        s_id_regwrite = WE_TRUE;
        s_id_branch_sel = BRADD_ADDR; //check this one (dont think its right)
        s_id_branchop = BRANCH_TRUE;
        s_id_rfwt_sel = RFWT_PC;
        s_id_alusrc1 = ALU_SRC1_PC;
        s_id_alusrc2 = ALU2_IMM;
        s_id_immsel = IMM_JTYPE;
        // HALT Command
        s_id_halt = HALT_NOHALT;
        s_id_memop = MEM_NOP;
    };
};


element i_hw_loads
{
    use opc_itype_loads as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        switch (opc){
            case ITYPE_LB:
                
                s_id_memop = MEM_LB; 
                break;
            case ITYPE_LH:

                s_id_memop = MEM_LH;
                break;
            case ITYPE_LW:

                s_id_memop = MEM_LW;
                break;
            case ITYPE_LBU:

                s_id_memop = MEM_LBU;
                break;
            case ITYPE_LHU:

                s_id_memop = MEM_LHU;
                break;
            default:

                break;

        }
        s_id_aluop = ALU_ADD;
        s_id_regwrite = WE_TRUE;
        s_id_branch_sel = BRADD_ADDR; 
        s_id_branchop = BRANCH_FALSE;
        s_id_rfwt_sel = RFWT_MEM; //double check this
        s_id_alusrc1 =  ALU_SRC1_REG;
        s_id_alusrc2 = ALU2_IMM; //check this
        s_id_immsel =  IMM_ITYPE; 
        // HALT Command
        s_id_halt = HALT_NOHALT;

    };
};

element i_hw_store
{
    use opc_stype_store as opc;

    assembly { opc };
    binary { opc };

    semantics
    {
        switch (opc){
            case STYPE_SB:

                s_id_memop = MEM_SB;
                break;
            case STYPE_SH:

                s_id_memop = MEM_SH;
                break;
            case STYPE_SW:

                s_id_memop = MEM_SW;
                break;
            default:
            
                break;
        }

        s_id_aluop = ALU_ADD;
        s_id_regwrite = WE_FALSE;
        s_id_branch_sel = BRADD_ADDR; 
        s_id_branchop = BRANCH_FALSE;
        s_id_rfwt_sel = RFWT_MEM; //double check this
        s_id_alusrc1 =  ALU_SRC1_REG;
        s_id_alusrc2 = ALU2_IMM; //check this
        s_id_immsel =  IMM_STYPE; 
        // HALT Command
        s_id_halt = HALT_NOHALT;

    };
};